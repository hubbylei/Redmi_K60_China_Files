name: Buid_KSU

on:
  repository_dispatch:
    types: [Auto compile]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Clone kernel source
      id: source
      run: |
        mkdir -p ${HOME}/bin
        PATH="${HOME}/bin:${PATH}"
        curl -LSs https://storage.googleapis.com/git-repo-downloads/repo > ${HOME}/bin/repo
        chmod a+x ${HOME}/bin/repo
        git config --global user.email "hubbylei@hubbylei.dynu.net"
        git config --global user.name "hubbylei"
        mkdir ${GITHUB_WORKSPACE}/android-kernel
        cd ${GITHUB_WORKSPACE}/android-kernel
        repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-android12-5.10-lts
        repo sync -cj$(nproc)
        cd ${GITHUB_WORKSPACE}/android-kernel/common
        Kernel_HEAD=$(git rev-parse HEAD)
        echo "Kernel_HEAD=${Kernel_HEAD}" >> $GITHUB_OUTPUT

    - name: Setup KernelSU
      run: |
        cd ${GITHUB_WORKSPACE}/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Build Image
      id: build
      run: |
        PATH="${HOME}/bin:${PATH}"
        cd ${GITHUB_WORKSPACE}/android-kernel
        curl -skL "https://raw.githubusercontent.com/marywangran/westwood-sub/main/tcp_westwood.c" -o "common/net/ipv4/tcp_westwood.c"
        cp -f ${GITHUB_WORKSPACE}/gki_defconfig common/arch/arm64/configs/gki_defconfig
        LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/config.sh gki_defconfig
        cd ${GITHUB_WORKSPACE}/android-kernel/common
        git add -A && git commit -a -m "Add KernelSU"
        cd ${GITHUB_WORKSPACE}/android-kernel
        LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh -j$(nproc) LLVM=1
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create version
      id: version
      if: steps.build.outputs.status == 'success' && !cancelled()
      run: |
        cd ${GITHUB_WORKSPACE}/android-kernel/common
        VERSION=$(grep "^VERSION = .*$" Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep "^PATCHLEVEL = .*$" Makefile | awk '{print $3}')
        SUBLEVEL=$(grep "^SUBLEVEL = .*$" Makefile | awk '{print $3}')
        Kernel_ver="android12-${VERSION}.${PATCHLEVEL}.${SUBLEVEL}"
        cd ${GITHUB_WORKSPACE}/android-kernel/KernelSU
        KSU_ver=$(($(git rev-list --count HEAD) + 10200))
        echo "kernel_ver=${Kernel_ver}" >> $GITHUB_OUTPUT
        echo "KSU_ver=${KSU_ver}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: steps.version.outputs.status == 'success' && !cancelled()
      run: |
        echo "## :mega:Update content" > release.txt
        echo "![](https://img.shields.io/github/downloads/${{ github.repository }}/Kernel-SU-${{ steps.version.outputs.KSU_ver }}/total?style=flat-square)" >> release.txt
        echo "### Info" >> ${GITHUB_WORKSPACE}/release.txt
        echo "**:minidisc: Latest Kernel: ${{ steps.version.outputs.kernel_ver }}(${{ steps.source.outputs.Kernel_HEAD }})**" >> release.txt
        echo "**:minidisc: Latest Kernel-SU: ${{ steps.version.outputs.KSU_ver }}**" >> release.txt
        touch release.txt
        tag=Kernel-SU-${{ steps.version.outputs.KSU_ver }}
        echo "release_tag=${tag}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Zip AnyKernel3
      if: steps.version.outputs.status == 'success' && !cancelled()
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/AnyKernel3
        unzip AnyKernel3.zip -d ${GITHUB_WORKSPACE}/AnyKernel3
        cp ${GITHUB_WORKSPACE}/android-kernel/out/*/dist/Image ${GITHUB_WORKSPACE}/AnyKernel3/
        cd ${GITHUB_WORKSPACE}/AnyKernel3
        zip -r ${GITHUB_WORKSPACE}/${{ steps.tag.outputs.release_tag }}-${{ steps.version.outputs.kernel_ver }}.zip *

    - name: Download Manager
      id: apk
      if: steps.build.outputs.status == 'success' && !cancelled()
      run: |
        json_workflow_runs=$(curl -skL -H "${{ secrets.HEADERS }}" https://api.github.com/repos/tiann/KernelSU/actions/runs)
        total=$(echo $json_workflow_runs | jq .total_count)
        pages=$(($total / 30))
        if [ $(($total % 30)) -gt 0 ];then
            pages=$(($pages + 1))
        fi

        i=1
        while [ $i -le $pages ]
        do
            json_workflow_runs=$(curl -skL -H "${{ secrets.HEADERS }}" "https://api.github.com/repos/tiann/KernelSU/actions/runs?page=${i}")
            runs_url=$(echo $json_workflow_runs | jq '.workflow_runs[] | select(.name == "Build Manager")' | jq -r .url)
            for url in ${runs_url}
            do
                artifacts_url=${url}/artifacts
                json_artifacts_url=$(curl -skL -H "${{ secrets.HEADERS }}" $artifacts_url)
                archive_url=$(echo $json_artifacts_url | jq '.artifacts[] | select(.name == "manager")' | jq -r .archive_download_url)
                if [ ! -z ${archive_url} ];then
                    echo "Download From ${archive_url}"
                    curl -skL "${archive_url}" -H "${{ secrets.HEADERS }}" -o "${GITHUB_WORKSPACE}/manager.zip"
                    unzip -o "${GITHUB_WORKSPACE}/manager.zip" -d "${GITHUB_WORKSPACE}" > /dev/null
                    apk=$(ls *.apk)
                    echo "apk_name=${apk}" >> $GITHUB_OUTPUT
                    break
                fi
            done

            if [ ! -z ${archive_url} ];then
                break
            fi

            let i++
        done

    - name: Upload release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
            ${{ steps.tag.outputs.release_tag }}-${{ steps.version.outputs.kernel_ver }}.zip
            ${{ steps.apk.outputs.apk_name }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 5
